[gd_scene load_steps=5 format=2]

[ext_resource path="res://vedit/VoxelGrid.gd" type="Script" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode unshaded;

uniform vec3 grid_size = vec3(5);

varying vec3 normal;

void vertex()
{
	normal = NORMAL;
}

// Modified version from https://www.shadertoy.com/view/4ljfRD
float drawLine (vec2 p1, vec2 p2, vec2 uv, float one_px)
{
    float r = 0.;
	
	vec2 grid = uv / fwidth(uv);
	float line = clamp((abs(min(grid.x, grid.y))), 0.0, 1.0);
    
    // get dist between points
    float d = distance(p1, p2);
    
    // get dist between current pixel and p1
    float duv = distance(p1, uv);

    //if point is on line, according to dist, it should match current uv 
    r = 1.-floor(1.-(line * one_px)+distance (mix(p1, p2, clamp(duv/d, 0., 1.)),  uv));
        
    return r;
}

vec2 Vec3ToVec2(vec3 vec)
{
	if(round(abs(normal.x)) == 1.0)
		return vec.zy;
	if(round(abs(normal.y)) == 1.0)
		return vec.xz;
		
	return vec.xy;
}

void fragment() 
{
	float r = drawLine(vec2(0, 0), vec2(1, 0), UV, 20.0 / VIEWPORT_SIZE.x);
	float r1 = drawLine(vec2(0, 0), vec2(0, 1), UV, 20.0 / VIEWPORT_SIZE.x);
	float r2 = drawLine(vec2(0, 1), vec2(1, 1), UV, 20.0 / VIEWPORT_SIZE.x);
	float r3 = drawLine(vec2(1, 0), vec2(1, 1), UV, 20.0 / VIEWPORT_SIZE.x);
	
	float outr = r;
	outr = mix(outr, 1.0, r1);
	outr = mix(outr, 1.0, r2);
	outr = clamp(mix(outr, 1.0, r3), 0.0, 1.0);
	
	//ALBEDO = vec3(outr);
	
	vec2 uv = fract(UV * Vec3ToVec2(grid_size));

	vec2 grid = uv / fwidth(uv) * 0.5;
	float line = clamp((1.0 - abs(min(grid.x, grid.y))), 0.0, 1.0);
	
	//float distx = uv.x - 1.0 / VIEWPORT_SIZE.x;
	//float disty = step(uv.y, 1.0 / VIEWPORT_SIZE.y);
	
	float outline = clamp(mix(line * 0.5, 1.0, outr), 0.0, 1.0);
	
	//ALBEDO = abs(normal);
	ALBEDO = vec3(outline); //vec3(disty, disty, disty); //mix(vec3(1.0), vec3(0.0), mixValue);
	ALPHA = outline;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/grid_size = Vector3( 5, 5, 5 )

[sub_resource type="ArrayMesh" id=3]
surfaces/0 = {
"aabb": AABB( -2.5, -2.5, -2.5, 5.00001, 5.00001, 5.00001 ),
"array_data": PoolByteArray( 0, 0, 32, 64, 0, 0, 32, 64, 0, 0, 32, 64, 255, 127, 255, 127, 0, 60, 0, 60, 0, 0, 32, 192, 0, 0, 32, 64, 0, 0, 32, 64, 255, 127, 255, 127, 0, 0, 0, 60, 0, 0, 32, 192, 0, 0, 32, 192, 0, 0, 32, 64, 255, 127, 255, 127, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 32, 192, 0, 0, 32, 64, 255, 127, 255, 127, 0, 60, 0, 0, 0, 0, 32, 192, 0, 0, 32, 192, 0, 0, 32, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 192, 0, 0, 32, 64, 0, 0, 32, 192, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 32, 64, 0, 0, 32, 64, 0, 0, 32, 192, 0, 0, 0, 0, 0, 60, 0, 60, 0, 0, 32, 64, 0, 0, 32, 192, 0, 0, 32, 192, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 32, 192, 0, 0, 32, 64, 0, 0, 32, 64, 255, 127, 0, 0, 0, 60, 0, 60, 0, 0, 32, 192, 0, 0, 32, 64, 0, 0, 32, 192, 255, 127, 0, 0, 0, 0, 0, 60, 0, 0, 32, 192, 0, 0, 32, 192, 0, 0, 32, 192, 255, 127, 0, 0, 0, 0, 0, 0, 0, 0, 32, 192, 0, 0, 32, 192, 0, 0, 32, 64, 255, 127, 0, 0, 0, 60, 0, 0, 0, 0, 32, 192, 0, 0, 32, 64, 0, 0, 32, 64, 255, 127, 0, 0, 0, 60, 0, 60, 0, 0, 32, 192, 0, 0, 32, 192, 0, 0, 32, 192, 255, 127, 0, 0, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 32, 192, 0, 0, 32, 192, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 32, 64, 0, 0, 32, 192, 1, 128, 0, 0, 0, 0, 0, 60, 0, 0, 32, 64, 0, 0, 32, 64, 0, 0, 32, 64, 1, 128, 0, 0, 0, 60, 0, 60, 0, 0, 32, 64, 0, 0, 32, 192, 0, 0, 32, 192, 1, 128, 0, 0, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 32, 64, 0, 0, 32, 64, 1, 128, 0, 0, 0, 60, 0, 60, 0, 0, 32, 64, 0, 0, 32, 192, 0, 0, 32, 64, 1, 128, 0, 0, 0, 60, 0, 0, 0, 0, 32, 64, 0, 0, 32, 64, 0, 0, 32, 192, 0, 0, 1, 128, 0, 60, 0, 60, 0, 0, 32, 192, 0, 0, 32, 64, 0, 0, 32, 192, 0, 0, 1, 128, 0, 0, 0, 60, 0, 0, 32, 192, 0, 0, 32, 64, 0, 0, 32, 64, 0, 0, 1, 128, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 32, 64, 0, 0, 32, 64, 0, 0, 1, 128, 0, 60, 0, 0, 0, 0, 32, 192, 0, 0, 32, 192, 0, 0, 32, 64, 0, 0, 255, 127, 0, 0, 0, 0, 0, 0, 32, 192, 0, 0, 32, 192, 0, 0, 32, 192, 0, 0, 255, 127, 0, 0, 0, 60, 0, 0, 32, 64, 0, 0, 32, 192, 0, 0, 32, 192, 0, 0, 255, 127, 0, 60, 0, 60, 0, 0, 32, 192, 0, 0, 32, 192, 0, 0, 32, 64, 0, 0, 255, 127, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 32, 192, 0, 0, 32, 192, 0, 0, 255, 127, 0, 60, 0, 60, 0, 0, 32, 64, 0, 0, 32, 192, 0, 0, 32, 64, 0, 0, 255, 127, 0, 60, 0, 0 ),
"array_index_data": PoolByteArray( 0, 0, 1, 0, 2, 0, 3, 0, 0, 0, 2, 0, 4, 0, 5, 0, 6, 0, 4, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0, 17, 0, 18, 0, 19, 0, 20, 0, 21, 0, 22, 0, 23, 0, 20, 0, 22, 0, 24, 0, 25, 0, 26, 0, 27, 0, 28, 0, 29, 0 ),
"blend_shape_data": [  ],
"format": 2194707,
"index_count": 36,
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 30
}

[node name="VoxelGrid" type="MeshInstance"]
material_override = SubResource( 2 )
cast_shadow = 0
mesh = SubResource( 3 )
script = ExtResource( 1 )
__meta__ = {
"_edit_group_": true
}
